// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/greeter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (Greeter_StreamAudioClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (Greeter_StreamAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/Greeter/StreamAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStreamAudioClient{stream}
	return x, nil
}

type Greeter_StreamAudioClient interface {
	Send(*AudioChunk) error
	CloseAndRecv() (*AudioReply, error)
	grpc.ClientStream
}

type greeterStreamAudioClient struct {
	grpc.ClientStream
}

func (x *greeterStreamAudioClient) Send(m *AudioChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterStreamAudioClient) CloseAndRecv() (*AudioReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AudioReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	StreamAudio(Greeter_StreamAudioServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) StreamAudio(Greeter_StreamAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).StreamAudio(&greeterStreamAudioServer{stream})
}

type Greeter_StreamAudioServer interface {
	SendAndClose(*AudioReply) error
	Recv() (*AudioChunk, error)
	grpc.ServerStream
}

type greeterStreamAudioServer struct {
	grpc.ServerStream
}

func (x *greeterStreamAudioServer) SendAndClose(m *AudioReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterStreamAudioServer) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _Greeter_StreamAudio_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greeter.proto",
}

// TranscriberClient is the client API for Transcriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscriberClient interface {
	// "Transcribe"という名前のRPCを定義
	// 6秒分の音声データ(AudioData)を一度に受け取り、文字起こし結果(TranscriptionReply)を返す
	Transcribe(ctx context.Context, in *AudioData, opts ...grpc.CallOption) (*TranscriptionReply, error)
}

type transcriberClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriberClient(cc grpc.ClientConnInterface) TranscriberClient {
	return &transcriberClient{cc}
}

func (c *transcriberClient) Transcribe(ctx context.Context, in *AudioData, opts ...grpc.CallOption) (*TranscriptionReply, error) {
	out := new(TranscriptionReply)
	err := c.cc.Invoke(ctx, "/Transcriber/Transcribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriberServer is the server API for Transcriber service.
// All implementations must embed UnimplementedTranscriberServer
// for forward compatibility
type TranscriberServer interface {
	// "Transcribe"という名前のRPCを定義
	// 6秒分の音声データ(AudioData)を一度に受け取り、文字起こし結果(TranscriptionReply)を返す
	Transcribe(context.Context, *AudioData) (*TranscriptionReply, error)
	mustEmbedUnimplementedTranscriberServer()
}

// UnimplementedTranscriberServer must be embedded to have forward compatible implementations.
type UnimplementedTranscriberServer struct {
}

func (UnimplementedTranscriberServer) Transcribe(context.Context, *AudioData) (*TranscriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedTranscriberServer) mustEmbedUnimplementedTranscriberServer() {}

// UnsafeTranscriberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriberServer will
// result in compilation errors.
type UnsafeTranscriberServer interface {
	mustEmbedUnimplementedTranscriberServer()
}

func RegisterTranscriberServer(s grpc.ServiceRegistrar, srv TranscriberServer) {
	s.RegisterService(&Transcriber_ServiceDesc, srv)
}

func _Transcriber_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriberServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transcriber/Transcribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriberServer).Transcribe(ctx, req.(*AudioData))
	}
	return interceptor(ctx, in, info, handler)
}

// Transcriber_ServiceDesc is the grpc.ServiceDesc for Transcriber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transcriber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Transcriber",
	HandlerType: (*TranscriberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _Transcriber_Transcribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/greeter.proto",
}
